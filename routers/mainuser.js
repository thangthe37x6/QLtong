import express from "express";
import { authMiddleware, requireAdmin } from "../middlewares/auth.js";
import conferenceData from "../models/modelmain.js";
import personalData from "../models/modelUser.js"
import fs from 'fs'
import path from 'path';
import multer from "multer";
const routerMainUser = express.Router()


const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    cb(null, `${Date.now()}-${file.fieldname}${ext}`);
  }
});
const upload = multer({ storage });


routerMainUser.get('/DKHN', authMiddleware, async (req, res) => {
  try {
    const username = req.user.username
    const role = req.user.role
    const data = await conferenceData.find({ username: username })
    res.status(200).render("DKHN", { data, role: role, username: req.user.username });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch h·ªôi ngh·ªã:', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch h·ªôi ngh·ªã' });
  }

});

routerMainUser.get('/api/DKHN', authMiddleware, async (req, res) => {
  try {
    const username = req.user.username
    const data = await conferenceData.find({ username: username })
    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch h·ªôi ngh·ªã' });
  }
});
routerMainUser.post('/DKHN', authMiddleware, async (req, res) => {
  try {
    const username = req.user.username
    const { buoiToChuc, ngayToChuc, huyenToChuc, loaiHinh, diaDiem } = req.body
    const N_ngay = new Date(ngayToChuc)
    const days = ["Ch·ªß nh·∫≠t", "Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y"];
    const thu = days[N_ngay.getDay()];
    const conference_new = new conferenceData({ username: username, thu: thu, buoiToChuc: buoiToChuc, ngayToChuc: ngayToChuc, huyenToChuc: huyenToChuc, loaiHinh: loaiHinh, diaDiem: diaDiem })
    await conference_new.save()
    res.redirect("/DKHN")
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch h·ªôi ngh·ªã:', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch h·ªôi ngh·ªã' });
  }

});
// C·∫≠p nh·∫≠t h·ªôi ngh·ªã theo ID
routerMainUser.post('/DKHN/update/:id', authMiddleware, async (req, res) => {
  try {
    const updatedConference = await conferenceData.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );

    if (!updatedConference) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y h·ªôi ngh·ªã ƒë·ªÉ c·∫≠p nh·∫≠t' });
    }

    res.status(200).json(updatedConference);
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t h·ªôi ngh·ªã:', error);
    res.status(500).json({ error: 'C·∫≠p nh·∫≠t th·∫•t b·∫°i' });
  }
});

routerMainUser.post('/DKHN/delete/:id', authMiddleware, async (req, res) => {
  try {
    // 1. T√¨m h·ªôi ngh·ªã tr∆∞·ªõc khi x√≥a
    const conference = await conferenceData.findById(req.params.id);
    if (!conference) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y h·ªôi ngh·ªã ƒë·ªÉ x√≥a' });
    }

    // 2. X√≥a ·∫£nh n·∫øu t·ªìn t·∫°i
    const deleteIfExists = (filename) => {
      if (filename) {
        const filePath = path.join('uploads', filename);
        fs.unlink(filePath, (err) => {
          if (err) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file ${filePath}:`, err.message);
          } else {
            console.log(`üóëÔ∏è ƒê√£ x√≥a file: ${filePath}`);
          }
        });
      }
    };

    deleteIfExists(conference.anhDanhSach);
    deleteIfExists(conference.anhTongThe);

    // 3. X√≥a h·ªôi ngh·ªã trong MongoDB
    await conferenceData.findByIdAndDelete(req.params.id);

    res.status(200).json({ message: '‚úÖ X√≥a h·ªôi ngh·ªã th√†nh c√¥ng k√®m ·∫£nh' });
  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a h·ªôi ngh·ªã:', error);
    res.status(500).json({ error: 'X√≥a th·∫•t b·∫°i' });
  }
});

// --------------------------------------------------------------------------------------------------------------------------
routerMainUser.get('/BCKQ', authMiddleware, async (req, res) => {
  try {
    const username = req.user.username;
    const role = req.user.role;

    const data = await conferenceData.find({
      username: username,
      $or: [
        { nhomPhuTrach: { $exists: false } },
        { nhomPhuTrach: null },
        { nhomPhuTrach: '' }
      ]
    }).lean();

    res.status(200).render("BCKQ", {
      data,
      role,
      username
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu h·ªôi ngh·ªã:", error);
    res.status(500).send("Kh√¥ng th·ªÉ l·∫•y danh s√°ch h·ªôi ngh·ªã");
  }
});

// C·∫≠p nh·∫≠t h·ªôi ngh·ªã: s·ªë ng∆∞·ªùi, ·∫£nh
routerMainUser.post(
  '/BCKQ', authMiddleware,
  upload.fields([
    { name: 'anhDanhSach', maxCount: 1 },
    { name: 'anhTongThe', maxCount: 1 }
  ]),
  async (req, res) => {
    const { idHoiNghi, soLuongThamDu, nhomPhuTrach } = req.body;
    const anh1 = req.files?.['anhDanhSach']?.[0]?.filename || null;
    const anh2 = req.files?.['anhTongThe']?.[0]?.filename || null;
    console.log(anh1, anh2)
    await conferenceData.findByIdAndUpdate(idHoiNghi, {
      $set: {
        nhomPhuTrach: nhomPhuTrach,
        SL: Number(soLuongThamDu),
        anhDanhSach: anh1,
        anhTongThe: anh2
      }
    });

    res.redirect('/BCKQ');
  }
);



// ------------------------------------------------------------------------------------------------------------------
routerMainUser.get('/DKTGHN', authMiddleware, async (req, res) => {
  try {
    const role = req.user.role;
    const data = await conferenceData.find({}, "ngayToChuc");
    const uniqueDates = [...new Set(data.map(item => item.ngayToChuc))];

    res.render('DKTGHN', { uniqueDates, role, message: null, username: req.user.username }); // render ƒë√∫ng view
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'L·ªói server' });
  }
});

routerMainUser.post("/DKTGHN", authMiddleware, async (req, res) => {
  try {
    const username = req.user.username;
    const dtbody = req.body;

    const detailHN = await conferenceData.findById(dtbody.idHoiNghi).lean();

    if (!detailHN) {
      return res.status(404).send("Kh√¥ng t√¨m th·∫•y h·ªôi ngh·ªã");
    }

    // ‚úÖ Ki·ªÉm tra tr√πng: ƒë√£ ƒëƒÉng k√Ω h·ªôi ngh·ªã n√†y ch∆∞a
    const alreadyRegistered = await personalData.findOne({
      username: username,
      'detailHN._id': dtbody.idHoiNghi,
    });

    if (alreadyRegistered) {
      return res.status(400).send("B·∫°n ƒë√£ ƒëƒÉng k√Ω h·ªôi ngh·ªã n√†y r·ªìi");
    }

    // ‚úÖ N·∫øu ch∆∞a c√≥ th√¨ cho ph√©p ƒëƒÉng k√Ω
    const newData = new personalData({
      username,
      detailHN: detailHN,
    });

    await newData.save();
    res.redirect("/DKTGHN");
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", error);
    res.status(500).send("L·ªói khi c·∫≠p nh·∫≠t");
  }
});

routerMainUser.get("/api/DKTGHN", authMiddleware, async (req, res) => {
  try {
    const { date } = req.query;
    const result = await conferenceData.find({ ngayToChuc: date });
    res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y h·ªôi ngh·ªã:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
});

routerMainUser.get("/api/user-conferences", authMiddleware, async (req, res) => {
  try {
    const username = req.user.username;

    const results = await personalData.find({ username: username }).lean();

    console.log(results)
    res.status(200).json(results);
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y h·ªôi ngh·ªã c·ªßa user:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
});
routerMainUser.post('/DKTGHN/delete/:id', authMiddleware, async (req, res) => {
  try {
    const id = req.params.id;
    console.log(id)

    const conference = await personalData.findById(id);
    if (!conference) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y h·ªôi ngh·ªã ƒë·ªÉ x√≥a' });
    }

    await personalData.findByIdAndDelete(id);
    res.status(200).json({ message: 'ƒê√£ x√≥a th√†nh c√¥ng' }); // ‚úÖ d√πng JSON thay v√¨ redirect
  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a h·ªôi ngh·ªã:', error);
    res.status(500).json({ error: 'X√≥a th·∫•t b·∫°i' });
  }
});


routerMainUser.get('/api/DKTGHN/:id', authMiddleware, async (req, res) => {
  try {
    const info = await conferenceData.findById(req.params.id);
    if (!info) res.status(401).json({ message: "kh√¥ng t√¨m th·∫•y th√¥ng tin" })
    res.status(200).json(info);
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", error);
    res.status(500).send("L·ªói khi c·∫≠p nh·∫≠t");
  }

});
// ----------------------------------------------------------------
routerMainUser.get("/KTPC", authMiddleware, async (req, res) => {
  res.render("KTPC", {
    role: req.user.role,
    username: req.user.username,
  });
});

routerMainUser.get("/api/KTPC", authMiddleware, async (req, res) => {
  const { date } = req.query;
  const result = await conferenceData.find({ ngayToChuc: date });
  res.json(result);
});


routerMainUser.get("/personal", authMiddleware, (req, res) => {
  try {

    res.status(200).render('personalAmin', { message: null, username: req.user.username, role: req.user.role })
  } catch (error) {
    console.log(error)
    res.status(500).json({ error: "L·ªói l·∫•y h·ªôi ngh·ªã theo ng√†y" });

  }
})

routerMainUser.post("/personal/export", authMiddleware, async (req, res) => {
  try {
    const { startDate, endDate } = req.query;
    const data = await personalData.find({ 'detailHN.ngayToChuc': { $gte: startDate, $lte: endDate } });

    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('TK t√†i tr·ª£');

    worksheet.columns = [
      { header: 'h·ªç v√† t√™n', key: 'fullname', width: 30 },
      { header: 'T√™n HN', key: 'tenHN', width: 30 },
      { header: 'Nh√≥m ph·ª• tr√°ch', key: 'nhomPhuTrach', width: 30 },
      { header: 'ƒê·ªãa ƒëi·ªÉm', key: 'diaDiem', width: 30 },
      { header: 'Ng√†y t·ªï ch·ª©c', key: 'ngayToChuc', width: 20 },
    ];
    data.forEach(seminar => {
      worksheet.addRow({
        fullname: seminar.username,
        tenHN: seminar.detailHN.tenHoiNghi,
        nhomPhuTrach: seminar.detailHN.nhomPhuTrach,
        ngayToChuc: seminar.detailHN.ngayToChuc,
        diaDiem: seminar.detailHN.diaDiem
      });
    });
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename=TK-nguoi-tham-gia-t·ª´${startDate.split("-").reverse().join("-")}-den${endDate.split("-").reverse().join("-")} .xlsx`);
    await workbook.xlsx.write(res);
    res.end();
  } catch (error) {
    console.log(error)
    res.status(500).json({ error: "L·ªói l·∫•y h·ªôi ngh·ªã theo ng√†y" });

  }
})
export default routerMainUser;